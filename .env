PORT=1777
PORT2=6060
DB_HOST=127.0.0.1
DB_NAME=kiosk
DB_USER=root
DB_PASSWORD=Yy588218!
JWT_SECRET=1234


# /**
#  * @param { import("knex").Knex } knex
#  * @returns { Promise<void> }
#  */
# exports.up = function(knex) {
#     return knex.schema
#     .createTable('restaurants', (table) => {
#         table.increments('id').primary();
#         table.string('name').notNullable();
#         table.string('email').notNullable();
#         table.string('location').notNullable();
#         table.string('password').notNullable();
#         table.timestamp('created_at').defaultTo(knex.fn.now());
#         table.timestamp('updated_at').defaultTo(knex.raw('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'))
#     })
#     .createTable('menues', (table) => {
#         table.increments('id').primary();
#         table
#           .integer('resteraunt_id')
#           .unsigned()
#           .references('restaurants.id')
#           .onUpdate('CASCADE')
#           .onDelete('CASCADE');
#         table.string('name').notNullable();
#         table.timestamp('created_at').defaultTo(knex.fn.now());
#         table.timestamp('updated_at').defaultTo(knex.raw('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'))
#     })
#     .createTable('items', (table) => {
#         table.increments('id').primary();
#         table
#             .integer('menu_id')
#             .unsigned()
#             .references('menues.id')
#             .onUpdate('CASCADE')
#             .onDelete('CASCADE');
#         table.string('name').notNullable();
#         table.boolean('availability').defaultTo(true);
#         table.string('description').notNullable();
#         table.timestamp('created_at').defaultTo(knex.fn.now());
#         table.timestamp('updated_at').defaultTo(knex.raw('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'))
#     })
#     .createTable('ingredients', (table) => {
#         table.increments('id').primary();
#         table
#             .integer('item_id')
#             .unsigned()
#             .references('items.id')
#             .onUpdate('CASCADE')
#             .onDelete('CASCADE');
#         table.string('name').notNullable();
#         table.boolean('availability').defaultTo(true);
#         table.timestamp('created_at').defaultTo(knex.fn.now());
#         table.timestamp('updated_at').defaultTo(knex.raw('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'))
#     })
    
# };

# /**
#  * @param { import("knex").Knex } knex
#  * @returns { Promise<void> }
#  */

# exports.down = function(knex) {
#     return knex.schema.dropTable('ingredients').dropTable('items').dropTable('menues').dropTable('restaurants');
# };



# CREATE DATABASE racer_test;

# CREATE TABLE tbl_racer (
# 	racer_id int primary key NOT NULL,
# 	racer_fname varchar(15) NOT NULL,
# 	racer_lname varchar(20) NOT NULL
# );

# INSERT INTO tbl_racer (racer_id, racer_fname, racer_lname)
# 	VALUES
# 	(1, 'Louis', 'Hamilton'),
# 	(2, 'Kevin', 'Hart'),
# 	(3, 'Ray', 'Lewis'),
# 	(4, 'Luka', 'Doncic'),
#     (5, 'Kyrie', 'Irving')
# ;

# SELECT * FROM tbl_racer;

# CREATE TABLE tbl_vehicle (
# 	vehicle_id int primary key NOT NULL identity (1,1),
# 	vehicle_make varchar(15) NOT NULL,
# 	vehicle_model varchar(20) NOT NULL,
# 	vehicle_racer_id int NOT NULL constraint fk_racer_id foreign key references tbl_racer(racer_id) ON UPDATE CASCADE ON DELETE CASCADE
# );

# INSERT INTO tbl_vehicle (vehicle_id, vehicle_make, vehicle_model, vehicle_racer_id)
# 	VALUES
# 	(1, 'Honda', 'Accord', 1),
#     (2, 'Mercedes', 'GLA350', 2),
# 	(3, 'Nissan', 'GTR', 3),
# 	(4, 'Lexus', 'LFA', 4),
# 	(5, 'Maserati', 'Levante', 5)
# ;

# SELECT * FROM tbl_vehicle;

# SELECT tbl_racer.racer_fname, tbl_racer.racer_lname, tbl_vehicle.vehicle_make, tbl_vehicle.vehicle_model
# FROM tbl_racer
# INNER JOIN tbl_vehicle ON vehicle_racer_id = racer_id;


/**
 * @param { import("knex").Knex } knex
 * @returns { Promise<void> }
 */
exports.up = function(knex) {
    return knex.schema
    .createTable('stores', (table) => {
        table.increments('id').primary();
        table.string('name').notNullable();
        table.string('email').notNullable();
        table.string('address').notNullable();
        table.string('password').notNullable();
        table.timestamp('created_at').defaultTo(knex.fn.now());
        table.timestamp('updated_at').defaultTo(knex.raw('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'))
    })
    .createTable('menues', (table) => {
        table.increments('id').primary();
        table
          .integer('store_id')
          .unsigned()
          .references('stores.id')
          .onUpdate('CASCADE')
          .onDelete('CASCADE');
        table.string('title').notNullable();
        table.timestamp('created_at').defaultTo(knex.fn.now());
        table.timestamp('updated_at').defaultTo(knex.raw('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'))
    })
    .createTable('categories', (table) => {
        table.increments('id').primary();
        table
            .integer('menu_id')
            .unsigned()
            .references('menues.id')
            .onUpdate('CASCADE')
            .onDelete('CASCADE');
        table.string('title').notNullable();
        table.timestamp('created_at').defaultTo(knex.fn.now());
        table.timestamp('updated_at').defaultTo(knex.raw('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'))
    })
    .createTable('orders', (table) => {
        table.increments('id').primary();
        table
          .integer('store_id')
          .unsigned()
          .references('stores.id')
          .onUpdate('CASCADE')
          .onDelete('CASCADE');
        table.integer('amount').notNullable();
        table.string('orderid').notNullable();
        table.string('customer').notNullable();
        table.string('payment').notNullable();
        table.timestamp('created_at').defaultTo(knex.fn.now());
        table.timestamp('updated_at').defaultTo(knex.raw('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'))
    })
    .createTable('products', (table) => {
        table.increments('id').primary();
        table
            .integer('menu_id')
            .unsigned()
            .references('menues.id')
            .onUpdate('CASCADE')
            .onDelete('CASCADE');
        table.string('productid').notNullable();
        table.integer('price').notNullable();
        table.string('name').notNullable();
        table.string('calories').notNullable();
        table.boolean('status').defaultTo(true);
        table.string('description').notNullable();
        table.timestamp('created_at').defaultTo(knex.fn.now());
        table.timestamp('updated_at').defaultTo(knex.raw('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'))
    })
    .createTable('ingredients', (table) => {
        table.increments('id').primary();
        table
            .integer('product_id')
            .unsigned()
            .references('products.id')
            .onUpdate('CASCADE')
            .onDelete('CASCADE');
        table.string('name').notNullable();
        table.boolean('availability').defaultTo(true);
        table.timestamp('created_at').defaultTo(knex.fn.now());
        table.timestamp('updated_at').defaultTo(knex.raw('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'))
    })
};

/**
 * @param { import("knex").Knex } knex
 * @returns { Promise<void> }
 */

exports.down = function(knex) {
    return knex.schema.dropTable('ingredients').dropTable('products').dropTable('orders').dropTable('menues').dropTable('restaurants');
};